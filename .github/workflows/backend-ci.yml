name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  DOTNET_VERSION: '6.0.x'
  BACKEND_PATH: './backend'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ env.BACKEND_PATH }}/coverage
        fail_ci_if_error: false
        verbose: true

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name == 'push'
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/loan-management-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BACKEND_PATH }}
        file: ${{ env.BACKEND_PATH }}/Dockerfile
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Install dotnet-outdated tool
      run: dotnet tool install --global dotnet-outdated-tool
      
    - name: Check for outdated packages
      run: dotnet outdated
      working-directory: ${{ env.BACKEND_PATH }}
      continue-on-error: true

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.BACKEND_PATH }}
      
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      working-directory: ${{ env.BACKEND_PATH }}
      continue-on-error: true
      
    - name: Run static analysis
      run: dotnet build --configuration Release --verbosity normal -p:TreatWarningsAsErrors=true
      working-directory: ${{ env.BACKEND_PATH }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically deploy to a staging server or cloud service"
        echo "For example: kubectl apply -f k8s/staging/ or docker-compose up -d"
      
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        echo "This would include basic API health checks"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "This would typically deploy to production servers or cloud service"
        echo "For example: kubectl apply -f k8s/production/ or docker-compose up -d"
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification tests..."
        echo "This would include API health checks and critical path tests"
        
    - name: Notify deployment
      run: |
        echo "Notifying team of successful deployment..."
        echo "This could send notifications to Slack, Teams, or email" 